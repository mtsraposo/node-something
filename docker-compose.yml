version: '3'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-server:7.2.1
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
      - '9997:9997'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_HOSTNAME: kafka

  kafka-schema-registry:
    container_name: kafka-schema-registry
    image: confluentinc/cp-schema-registry:7.2.1
    depends_on:
      - kafka
    ports:
      - '8081:8081'
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:29092
      SCHEMA_REGISTRY_HOST_NAME: kafka-schema-registry

  kafka-init-topics:
    image: confluentinc/cp-kafka:7.2.1
    depends_on:
      - kafka
    command: [ "/bin/setup_kafka_topics.sh" ]
    volumes:
      - ./bin/setup_kafka_topics.sh:/bin/setup_kafka_topics.sh

  kafka-connect:
    container_name: kafka-connect
    build:
      context: .
      dockerfile: kafka/connect/Dockerfile
    depends_on:
      - kafka-schema-registry
      - kafka-init-topics
      - postgres
    command: [ "/bin/start_kafka_connect.sh" ]
    ports:
      - "8083:8083"
    volumes:
      - ./kafka/connect/timescale-sink.properties:/etc/kafka-connect/config/timescale-sink.properties
      - ./kafka/connect/connect-standalone.properties:/etc/kafka-connect/connect-standalone.properties
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST: postgres

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:v0.7.1
    ports:
      - '8080:8080'
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: dev
      DYNAMIC_CONFIG_ENABLED: 'true'
    volumes:
      - ./kafka/kafka_ui/config.yml:/etc/kafkaui/dynamic_config.yaml

  postgres:
    image: timescale/timescaledb:latest-pg15
    ports:
      - '5431:5432'
    environment:
      POSTGRES_SHARED_PRELOAD_LIBRARIES: 'timescaledb'
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - pgdata:/var/lib/postgresql/data

  redis:
    image: redis:7.0.12
    ports:
      - '6378:6379'

  node-app:
    build:
      context: ./
      dockerfile: node/Dockerfile
    depends_on:
      - postgres
      - redis
      - kafka-connect
    env_file:
      - node/.env
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_USERNAME: postgres
      POSTGRES_PASSWORD: postgres
      REDIS_HOST: redis
      REDIS_PASSWORD: secret
      REDIS_PORT: 6379
      REDIS_USERNAME: default
    volumes:
      - ./node/prod-prv-key.pem:/app/prod-prv-key.pem
      - ./node/prod-pub-key.pem:/app/prod-pub-key.pem
      - ./node/testnet-prv-key.pem:/app/testnet-prv-key.pem
      - ./node/testnet-pub-key.pem:/app/testnet-pub-key.pem

#  python-app:
#    build:
#      context: ./python
#      dockerfile: Dockerfile
#    depends_on:
#      - postgres
#      - redis
#      - kafka-init-topics
#    volumes:
#      - ./python:/app

volumes:
  pgdata: