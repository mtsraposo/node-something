version: '3'

services:
    zookeeper:
        image: confluentinc/cp-zookeeper:7.2.1
        hostname: zookeeper
        container_name: zookeeper
        ports:
            - '2181:2181'
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000

    kafka:
        image: confluentinc/cp-server:7.2.1
        hostname: kafka
        container_name: kafka
        depends_on:
            - zookeeper
        ports:
            - '9092:9092'
            - '9997:9997'
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
            KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
            KAFKA_JMX_PORT: 9997
            KAFKA_JMX_HOSTNAME: kafka

    kafka-init-topics:
        image: confluentinc/cp-kafka:7.2.1
        depends_on:
            - kafka
        command: "bash -c 'echo Waiting for Kafka to be ready... && \
            cub kafka-ready -b kafka:29092 1 30 && \
            kafka-topics --create --topic dev.binance.quote.received.v1.json --partitions 1 --replication-factor 1 --if-not-exists --bootstrap-server kafka:29092'"

    kafka-ui:
        container_name: kafka-ui
        image: provectuslabs/kafka-ui:v0.7.1
        ports:
            - '8080:8080'
        environment:
            KAFKA_CLUSTERS_0_NAME: dev
            DYNAMIC_CONFIG_ENABLED: 'true'
        volumes:
            - ./kafka_ui.config.yml:/etc/kafkaui/dynamic_config.yaml
#  postgres:
#    image: postgres:latest
#    environment:
#      POSTGRES_USER: postgres
#      POSTGRES_PASSWORD: postgres
#      POSTGRES_DB: node_something_dev
#
#  redis:
#    image: redis:latest
#
#  node-app:
#    build:
#      context: ./
#      dockerfile: Dockerfile
#    depends_on:
#      - postgres
#      - redis
#      - kafka
#    volumes:
#      - ./node:/app
#
#  python-app:
#    build:
#      context: ./python
#      dockerfile: Dockerfile
#    depends_on:
#      - postgres
#      - kafka
#    volumes:
#      - ./python:/app
